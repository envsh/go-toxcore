// Code generated by go-bindata.
// sources:
// toxbsnodes.json
// DO NOT EDIT!

package xtox

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _toxbsnodesJson = []byte(`{
    "last_scan": 1567647924,
    "last_refresh": 1567647865,
    "nodes": [
        {
            "ipv4": "85.172.30.117",
            "ipv6": "-",
            "port": 33445,
            "tcp_ports": [
                33445
            ],
            "public_key": "8E7D0B859922EF569298B4D261A8CCB5FEA14FB91ED412A7603A585A25698832",
            "maintainer": "ray65536",
            "location": "RU",
            "status_udp": true,
            "status_tcp": true,
            "version": "1000002010",
            "motd": "Ray's Tox Node. TOX ID:3C3D6DB24D24754393679E59F198EF45EE26835AEF7EA3E3ECEA40E204F2B828BE86DF012ABF",
            "last_ping": 1567647926
        },
        {
            "ipv4": "85.143.221.42",
            "ipv6": "2a04:ac00:1:9f00:5054:ff:fe01:becd",
            "port": 33445,
            "tcp_ports": [
                33445,
                3389
            ],
            "public_key": "DA4E4ED4B697F2E9B000EEFE3A34B554ACD3F45F5C96EAEA2516DD7FF9AF7B43",
            "maintainer": "MAH69K",
            "location": "RU",
            "status_udp": true,
            "status_tcp": true,
            "version": "1000002009",
            "motd": "Saluton! Mia Tox ID: B229B7BD68FC66C2716EAB8671A461906321C764782D7B3EDBB650A315F6C458EF744CE89F07. Scribu! ;)",
            "last_ping": 1567647924
        },
        {
            "ipv4": "tox.verdict.gg",
            "ipv6": "-",
            "port": 33445,
            "tcp_ports": [
                3389,
                33445
            ],
            "public_key": "1C5293AEF2114717547B39DA8EA6F1E331E5E358B35F9B6B5F19317911C5F976",
            "maintainer": "Deliran",
            "location": "DE",
            "status_udp": true,
            "status_tcp": true,
            "version": "1000002008",
            "motd": "Praise The Sun!",
            "last_ping": 1567647924
        },
        {
            "ipv4": "163.172.136.118",
            "ipv6": "2001:bc8:4400:2100::13:41d",
            "port": 33445,
            "tcp_ports": [
                3389,
                33445
            ],
            "public_key": "2C289F9F37C20D09DA83565588BF496FAB3764853FA38141817A72E3F18ACA0B",
            "maintainer": "LittleVulpix",
            "location": "FR",
            "status_udp": true,
            "status_tcp": true,
            "version": "1000002008",
            "motd": "Running toktok/c-toxcore now. LittleTox - your friendly neighbourhood tox node!",
            "last_ping": 1567647924
        },
        {
            "ipv4": "78.46.73.141",
            "ipv6": "2a01:4f8:120:4091::3",
            "port": 33445,
            "tcp_ports": [
                3389,
                33445
            ],
            "public_key": "02807CF4F8BB8FB390CC3794BDF1E8449E9A8392C5D3F2200019DA9F1E812E46",
            "maintainer": "Sorunome",
            "location": "DE",
            "status_udp": true,
            "status_tcp": true,
            "version": "1000002008",
            "motd": "Keep calm and pony on!",
            "last_ping": 1567647924
        },
        {
            "ipv4": "46.229.52.198",
            "ipv6": "-",
            "port": 33445,
            "tcp_ports": [

            ],
            "public_key": "813C8F4187833EF0655B10F7752141A352248462A567529A38B6BBF73E979307",
            "maintainer": "Stranger",
            "location": "UA",
            "status_udp": true,
            "status_tcp": false,
            "version": "1000002008",
            "motd": "Freedom to parrots!",
            "last_ping": 1567647924
        },
        {
            "ipv4": "tox.neuland.technology",
            "ipv6": "tox.neuland.technology",
            "port": 33445,
            "tcp_ports": [
                33445,
                3389
            ],
            "public_key": "15E9C309CFCB79FDDF0EBA057DABB49FE15F3803B1BFF06536AE2E5BA5E4690E",
            "maintainer": "Nolz",
            "location": "DE",
            "status_udp": true,
            "status_tcp": true,
            "version": "1000002008",
            "motd": "Unlike Others",
            "last_ping": 1567647924
        },
        {
            "ipv4": "144.217.167.73",
            "ipv6": "-",
            "port": 33445,
            "tcp_ports": [
                3389,
                33445
            ],
            "public_key": "7E5668E0EE09E19F320AD47902419331FFEE147BB3606769CFBE921A2A2FD34C",
            "maintainer": "velusip",
            "location": "CA",
            "status_udp": true,
            "status_tcp": true,
            "version": "1000002010",
            "motd": "Jera",
            "last_ping": 1567647924
        },
        {
            "ipv4": "tox.abilinski.com",
            "ipv6": "-",
            "port": 33445,
            "tcp_ports": [
                33445
            ],
            "public_key": "10C00EB250C3233E343E2AEBA07115A5C28920E9C8D29492F6D00B29049EDC7E",
            "maintainer": "AnthonyBilinski",
            "location": "CA",
            "status_udp": true,
            "status_tcp": true,
            "version": "1000002010",
            "motd": "Running https://github.com/toktok/c-toxcore v0.2.10. qTox best Tox! Contact: AC18841E56CCDEE16E93E10E6AB2765BE54277D67F1372921B5B418A6B330D3D3FAFA60B0931",
            "last_ping": 1567647924
        },
        {
            "ipv4": "37.48.122.22",
            "ipv6": "2001:1af8:4700:a115:6::b",
            "port": 33445,
            "tcp_ports": [
                33445,
                3389
            ],
            "public_key": "1B5A8AB25FFFB66620A531C4646B47F0F32B74C547B30AF8BD8266CA50A3AB59",
            "maintainer": "Pokemon",
            "location": "NL",
            "status_udp": true,
            "status_tcp": true,
            "version": "1000002009",
            "motd": "Those who would give up essential Liberty, to purchase a little temporary Safety, deserve neither Liberty nor Safety",
            "last_ping": 1567647924
        },
        {
            "ipv4": "tox.novg.net",
            "ipv6": "-",
            "port": 33445,
            "tcp_ports": [
                33445
            ],
            "public_key": "D527E5847F8330D628DAB1814F0A422F6DC9D0A300E6C357634EE2DA88C35463",
            "maintainer": "blind_oracle",
            "location": "NL",
            "status_udp": true,
            "status_tcp": true,
            "version": "1000002009",
            "motd": "tox-bootstrapd",
            "last_ping": 1567647926
        },
        {
            "ipv4": "95.31.18.227",
            "ipv6": "-",
            "port": 33445,
            "tcp_ports": [
                33445
            ],
            "public_key": "257744DBF57BE3E117FE05D145B5F806089428D4DCE4E3D0D50616AA16D9417E",
            "maintainer": "ky0uraku",
            "location": "RU",
            "status_udp": true,
            "status_tcp": true,
            "version": "1000002008",
            "motd": "Vive le TOX",
            "last_ping": 1567647926
        },
        {
            "ipv4": "185.14.30.213",
            "ipv6": "2a00:1ca8:a7::e8b",
            "port": 443,
            "tcp_ports": [
                443,
                3389,
                33445
            ],
            "public_key": "2555763C8C460495B14157D234DD56B86300A2395554BCAE4621AC345B8C1B1B",
            "maintainer": "dvor",
            "location": "NL",
            "status_udp": true,
            "status_tcp": true,
            "version": "1000002008",
            "motd": "Just another tox node.",
            "last_ping": 1567647924
        },
        {
            "ipv4": "198.199.98.108",
            "ipv6": "2604:a880:1:20::32f:1001",
            "port": 33445,
            "tcp_ports": [
                3389,
                33445
            ],
            "public_key": "BEF0CFB37AF874BD17B9A8F9FE64C75521DB95A37D33C5BDB00E9CF58659C04F",
            "maintainer": "Cody",
            "location": "US",
            "status_udp": true,
            "status_tcp": true,
            "version": "1000002008",
            "motd": "tox-bootstrapd",
            "last_ping": 1567647924
        },
        {
            "ipv4": "52.53.185.100",
            "ipv6": "-",
            "port": 33445,
            "tcp_ports": [
                33445
            ],
            "public_key": "A04F5FE1D006871588C8EC163676458C1EC75B20B4A147433D271E1E85DAF839",
            "maintainer": "kpp",
            "location": "US",
            "status_udp": true,
            "status_tcp": true,
            "version": "3000000008",
            "motd": "Hi from tox-rs! I'm up 09 days 01 hours 12 minutes. TCP: incoming 171.3M, outgoing 141.5M, UDP: incoming 126.5M, outgoing 147.4M",
            "last_ping": 1567647926
        },
        {
            "ipv4": "tox.kurnevsky.net",
            "ipv6": "tox.kurnevsky.net",
            "port": 33445,
            "tcp_ports": [
                33445
            ],
            "public_key": "82EF82BA33445A1F91A7DB27189ECFC0C013E06E3DA71F588ED692BED625EC23",
            "maintainer": "kurnevsky",
            "location": "NL",
            "status_udp": true,
            "status_tcp": true,
            "version": "3000000008",
            "motd": "Hi from tox-rs! I'm up 01 days 14 hours 45 minutes.",
            "last_ping": 1567647926
        },
        {
            "ipv4": "116.196.77.132",
            "ipv6": "-",
            "port": 33445,
            "tcp_ports": [
                443,
                3389,
                33445
            ],
            "public_key": "040326E850DDCB49B1B2D9E3E2789D425774E4C5D783A55C09A024D05D2A8A66",
            "maintainer": "Ian",
            "location": "CN",
            "status_udp": true,
            "status_tcp": true,
            "version": "1000002009",
            "motd": "tox-bootstrapd",
            "last_ping": 1567647924
        },
        {
            "ipv4": "87.118.126.207",
            "ipv6": "-",
            "port": 33445,
            "tcp_ports": [
                33445
            ],
            "public_key": "0D303B1778CA102035DA01334E7B1855A45C3EFBC9A83B9D916FFDEBC6DD3B2E",
            "maintainer": "quux",
            "location": "DE",
            "status_udp": true,
            "status_tcp": true,
            "version": "1000002010",
            "motd": "Make Orwell Fiction Again",
            "last_ping": 1567647924
        },
        {
            "ipv4": "81.169.136.229",
            "ipv6": "2a01:238:4254:2a00:7aca:fe8c:68e0:27ec",
            "port": 33445,
            "tcp_ports": [
                33445,
                3389
            ],
            "public_key": "D031DAC44F00464D3C9636F9850BF0064BC37FEB55789A13B6F59052CAE8A958",
            "maintainer": "9ofSpades",
            "location": "DE",
            "status_udp": true,
            "status_tcp": true,
            "version": "1000002009",
            "motd": "🂩 wishes you happy toxing!",
            "last_ping": 1567647926
        },
        {
            "ipv4": "205.185.115.131",
            "ipv6": "-",
            "port": 53,
            "tcp_ports": [
                53,
                443,
                33445,
                3389
            ],
            "public_key": "3091C6BEB2A993F1C6300C16549FABA67098FF3D62C6D253828B531470B53D68",
            "maintainer": "GDR!",
            "location": "US",
            "status_udp": true,
            "status_tcp": true,
            "version": "1000002010",
            "motd": "https://gdr.name/tuntox/",
            "last_ping": 1567647924
        },
        {
            "ipv4": "tox2.abilinski.com",
            "ipv6": "tox2.abilinski.com",
            "port": 33445,
            "tcp_ports": [
                33445
            ],
            "public_key": "7A6098B590BDC73F9723FC59F82B3F9085A64D1B213AAF8E610FD351930D052D",
            "maintainer": "AnthonyBilinski",
            "location": "US",
            "status_udp": true,
            "status_tcp": true,
            "version": "1000002010",
            "motd": "Running https://github.com/toktok/c-toxcore v0.2.10. qTox best Tox! Contact: AC18841E56CCDEE16E93E10E6AB2765BE54277D67F1372921B5B418A6B330D3D3FAFA60B0931",
            "last_ping": 1567647924
        },
        {
            "ipv4": "109.111.178.181",
            "ipv6": "-",
            "port": 33445,
            "tcp_ports": [
                33445,
                3389
            ],
            "public_key": "25890C0139ECF9F217C72058D9E43E8873F6755D24374525623944915C98A903",
            "maintainer": "LivingstoneI2P",
            "location": "RU",
            "status_udp": true,
            "status_tcp": true,
            "version": "",
            "motd": "",
            "last_ping": 1567647924
        },
        {
            "ipv4": "node.tox.biribiri.org",
            "ipv6": "-",
            "port": 33445,
            "tcp_ports": [

            ],
            "public_key": "F404ABAA1C99A9D37D61AB54898F56793E1DEF8BD46B1038B9D822E8460FAB67",
            "maintainer": "nurupo",
            "location": "US",
            "status_udp": false,
            "status_tcp": false,
            "version": "1000002009",
            "motd": "Welcome, stranger #9009. I'm up for 6d 06h 18m 12s, running since May 10 18:01:25 UTC. If I get outdated, please ping my maintainer at nurupo.contributions@gmail.com",
            "last_ping": 1558052377
        },
        {
            "ipv4": "194.249.212.109",
            "ipv6": "2001:1470:fbfe::109",
            "port": 33445,
            "tcp_ports": [

            ],
            "public_key": "3CEE1F054081E7A011234883BC4FC39F661A55B73637A5AC293DDF1251D9432B",
            "maintainer": "fluke571",
            "location": "SI",
            "status_udp": false,
            "status_tcp": false,
            "version": "1000002008",
            "motd": "tox-bootstrapd",
            "last_ping": 1551736148
        },
        {
            "ipv4": "tox1.a68366.com",
            "ipv6": "tox1.a68366.com",
            "port": 33445,
            "tcp_ports": [

            ],
            "public_key": "AEC204B9A4501412D5F0BB67D9C81B5DB3EE6ADA64122D32A3E9B093D544327D",
            "maintainer": "a68366",
            "location": "FR",
            "status_udp": false,
            "status_tcp": false,
            "version": "1000002009",
            "motd": "!!! Planning to shut down the node June 2019 / ~1.5TB traffic a month (1/2 in, 1/2 out) / Since 26.12.2015 / a68366 at gmail",
            "last_ping": 1559433817
        },
        {
            "ipv4": "tox.initramfs.io",
            "ipv6": "tox.initramfs.io",
            "port": 33445,
            "tcp_ports": [

            ],
            "public_key": "3F0A45A268367C1BEA652F258C85F4A66DA76BCAA667A49E770BCC4917AB6A25",
            "maintainer": "initramfs",
            "location": "TW",
            "status_udp": false,
            "status_tcp": false,
            "version": "1000002009",
            "motd": "initramfs' Tox DHT Node",
            "last_ping": 1567068144
        },
        {
            "ipv4": "tox-node.loskiq.it",
            "ipv6": "-",
            "port": 33445,
            "tcp_ports": [

            ],
            "public_key": "88124F3C18C6CFA8778B7679B7329A333616BD27A4DFB562D476681315CF143D",
            "maintainer": "loskiq",
            "location": "RU",
            "status_udp": false,
            "status_tcp": false,
            "version": "1000002008",
            "motd": "Telegram: https://t.me/loskiq",
            "last_ping": 1541159265
        },
        {
            "ipv4": "tmux.ru",
            "ipv6": "-",
            "port": 33445,
            "tcp_ports": [

            ],
            "public_key": "7467AFA626D3246343170B309BA5BDC975DF3924FC9D7A5917FBFA9F5CD5CD38",
            "maintainer": "nrn",
            "location": "RU",
            "status_udp": false,
            "status_tcp": false,
            "version": "1000002008",
            "motd": "https://t.me/nyoroon",
            "last_ping": 1553884628
        },
        {
            "ipv4": "79.140.30.52",
            "ipv6": "-",
            "port": 33445,
            "tcp_ports": [

            ],
            "public_key": "FFAC871E85B1E1487F87AE7C76726AE0E60318A85F6A1669E04C47EB8DC7C72D",
            "maintainer": "warlomak",
            "location": "RU",
            "status_udp": false,
            "status_tcp": false,
            "version": "2016010100",
            "motd": "tox-easy-bootstrap",
            "last_ping": 1540145505
        },
        {
            "ipv4": "tox.yikifish.com",
            "ipv6": "-",
            "port": 33445,
            "tcp_ports": [

            ],
            "public_key": "8EF12E275BA9CD7D56625D4950F2058B06D5905D0650A1FE76AF18DB986DF760",
            "maintainer": "ytexas",
            "location": "CN",
            "status_udp": false,
            "status_tcp": false,
            "version": "1000002010",
            "motd": "tox-bootstrapd",
            "last_ping": 1563158209
        },
        {
            "ipv4": "52.27.228.84",
            "ipv6": "-",
            "port": 33445,
            "tcp_ports": [

            ],
            "public_key": "EDBEF0BE30CE1978F6EE9E13C1D4133409908929CC8AD7F56C4AE865B15B3177",
            "maintainer": "Palliums",
            "location": "US",
            "status_udp": false,
            "status_tcp": false,
            "version": "1000002009",
            "motd": "tox-bootstrapd",
            "last_ping": 1556440812
        }
    ]
}
`)

func toxbsnodesJsonBytes() ([]byte, error) {
	return _toxbsnodesJson, nil
}

func toxbsnodesJson() (*asset, error) {
	bytes, err := toxbsnodesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "toxbsnodes.json", size: 17495, mode: os.FileMode(420), modTime: time.Unix(1567647947, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"toxbsnodes.json": toxbsnodesJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"toxbsnodes.json": &bintree{toxbsnodesJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
